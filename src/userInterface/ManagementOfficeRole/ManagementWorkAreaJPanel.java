/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.ManagementOfficeRole;

import Business.EcoSystem;
import Business.Enterprise.AdoptionEnterprise;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HomeStudyEnterprise;
import Business.Network.Network;
import Business.Organization.CriminalCheckOrganization;
import Business.Organization.ManagementOrganization;
import Business.Organization.Organization;
import Business.ProspectiveParent.ProspectiveParent;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.CriminalCheckWorkRequest;
import Business.WorkQueue.ManagementWorkRequest;
import Business.WorkQueue.WorkRequest;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import static userInterface.RegisterParentRole.RegisterParent1JPanel.sendEmail;

/**
 *
 * @author sneha
 */
public class ManagementWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManagementWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount account;
    private ManagementOrganization organization;
    private AdoptionEnterprise enterprise;
    private EcoSystem business;
   // private CriminalCheckWorkRequest req;
    
    public ManagementWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, ManagementOrganization organization, AdoptionEnterprise enterprise, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.enterprise = enterprise;
        this.organization = organization;
        this.business = business;
        lblEnterprise.setText("Enterprise: "+enterprise.getName());
       // refreshData();
        populateRequestTable();
        populateRequestAssignedToMeTable();
       // populateCriminalRequestTable();
        /*for(WorkRequest w:organization.getWorkQueue().getWorkRequestList()){
            if(account.equals(w.getReceiver()) && w.getReceiver() != null){
               // String c = ((CriminalCheckWorkRequest)w).getStatus();
               for(WorkRequest criminalReq:account.getWorkQueue().getWorkRequestList()){
                //w.setStatus(c);
                if(w.getParent().equals(criminalReq.getParent())){
                String status = criminalReq.getStatus();
                w.setStatus(status);
                }
               }
            }
            
        }*/
    }

     public void populateRequestTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();

        model.setRowCount(0);

        for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
           if( request.getReceiver() == null){ //request.isProcessedFlag() == false &&
            Object[] row = new Object[4];
            row[0] = request;
            row[1] = request.getSender().getEmployee().getName();
            row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
            row[3] = request.getStatus();
            

            model.addRow(row);
           }
        }

     }
     public void populateRequestAssignedToMeTable() {
        DefaultTableModel model = (DefaultTableModel) workRequesAssignedToMeJTable.getModel();

        model.setRowCount(0);

        for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
           if(request.getReceiver() != null){  //request.isProcessedFlag() == false && 
            Object[] row = new Object[5];
            row[0] = request;
            row[1] = request.getSender().getEmployee().getName();
            row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
           
            row[3] = request.getStatus();
            row[4] = request.getMessage();

            model.addRow(row);
           }
        }

     }
     
     

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        processJButton = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        workRequesAssignedToMeJTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        lblEnterprise = new javax.swing.JLabel();
        btnAdoptionApproved = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 204, 204));

        processJButton.setText("Process for Homestudy ");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Parent", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Requests from adoption management:");

        workRequesAssignedToMeJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Parent", "Sender", "Receiver", "Status", "Training Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(workRequesAssignedToMeJTable);

        jLabel3.setText("Requests assigned to me:");

        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblTitle.setText("My Work Area -Management Office Role");

        lblEnterprise.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        lblEnterprise.setText("jLabel4");

        btnAdoptionApproved.setText("Approve for Adoption");
        btnAdoptionApproved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdoptionApprovedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(lblTitle)
                            .addComponent(lblEnterprise, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(252, 252, 252))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(assignJButton)
                                    .addComponent(refreshJButton))
                                .addGap(53, 53, 53))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnAdoptionApproved)
                                    .addComponent(processJButton))
                                .addGap(105, 105, 105))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblEnterprise)
                .addGap(30, 30, 30)
                .addComponent(refreshJButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(assignJButton)))
                .addGap(47, 47, 47)
                .addComponent(jLabel3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(processJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAdoptionApproved)))
                .addGap(218, 218, 218))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed

    //int selectedRow = workRequestJTable.getSelectedRow();
    
        int selectedRow = workRequesAssignedToMeJTable.getSelectedRow();
        if (selectedRow < 0){
          
            JOptionPane.showMessageDialog(null, "Please select a request message to process.");
            return;
        }
        else{
        
        ManagementWorkRequest request = (ManagementWorkRequest)workRequesAssignedToMeJTable.getValueAt(selectedRow, 0);
        
        CriminalCheckWorkRequest req = new CriminalCheckWorkRequest();// new added on nov 1
        ////request.setStatus("Processing");
        //request.setParent(request.getParent());
        //request.setSender(account);
        
        
        //request.setStatus("Initiate homestudy"); // new added on nov 1
        
        //CriminalCheckWorkRequest req = new CriminalCheckWorkRequest(); //commented on nov1
        
        
        req.setSender(account);
        req.setParent(request.getParent());
        req.setStatus(CriminalCheckWorkRequest.INITIATE);  //commented on nov1
        request.setStatus(ManagementWorkRequest.INITIATE_HOMESTUDY);
        String email = request.getParent().getEmailId();   
        req.setProcessedFlag(true);
        request.setProcessedFlag(true);
        
            Organization org = null;
            Enterprise ent =  null;
       
    for (Network network : business.getNetworkList()) {
         for (Enterprise enterprise1 : network.getEnterpriseDirectory().getEnterpriseList())
         if(enterprise1 instanceof HomeStudyEnterprise)
         {
            for (Organization organization1 : enterprise1.getOrganizationDirectory().getOrganizationList())             
            {
            if (organization1 instanceof CriminalCheckOrganization){
                org = organization1;
                ent=enterprise1;
                break;
               }
            }
         }
    }
        
        if (org!=null){
        
           org.getWorkQueue().getWorkRequestList().add(req);
           account.getWorkQueue().getWorkRequestList().add(req);
           JOptionPane.showMessageDialog(null, "Request message sent to Criminal check Organization");
           sendEmail("parent2202@gmail.com", "Parent@2202", email, "Request Approved || Pending for Background Verification", "Dear " + req.getParent().toString() + "," + "Your Application is under reviewand Now, it is under criminal background verification process");
           populateRequestTable();
        }
       // organization.getWorkQueue().deleteReq(request);
        } 
    
        
      /*  int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow >= 0) {
            LabTestWorkRequest request = (LabTestWorkRequest) workRequestJTable.getValueAt(selectedRow, 0);

            request.setStatus("Processing");

            ProcessWorkRequestJPanel processWorkRequestJPanel = new ProcessWorkRequestJPanel(userProcessContainer, request);
            userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);

        } else {
            JOptionPane.showMessageDialog(null, "Please select a request message to process.");
            return;
        }*/
     /* for(WorkRequest w:organization.getWorkQueue().getWorkRequestList()){
            if(account.equals(w.getReceiver()) && w.getReceiver() != null){
               // String c = ((CriminalCheckWorkRequest)w).getStatus();
               for(WorkRequest criminalReq:account.getWorkQueue().getWorkRequestList()){
                //w.setStatus(c);
                if(w.getParent().equals(criminalReq.getParent())){
                String status = criminalReq.getStatus();
                w.setStatus(status);
                }
               }
            }
            
        }*/
        populateRequestAssignedToMeTable();
       // populateCriminalRequestTable();
    }//GEN-LAST:event_processJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateRequestTable();
        populateRequestAssignedToMeTable();
        //populateCriminalRequestTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

//        int selectedRow = workRequestJTable.getSelectedRow();
//
//        if (selectedRow >= 0) {
//            WorkRequest request = (WorkRequest) workRequestJTable.getValueAt(selectedRow, 0);
//            if (request.getStatus().equalsIgnoreCase("Completed")) {
//                JOptionPane.showMessageDialog(null, "Request already processed.");
//                return;
//            } else {
//                request.setReceiver(account);
//                request.setStatus("Pending");
//                populateRequestTable();
//
//            }
//
//        } else {
//            JOptionPane.showMessageDialog(null, "Choose a request to process.");
//            return;
//        }

  int selectedRow = workRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        
        WorkRequest request = (WorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
        
        request.setReceiver(account);
        request.setProcessedFlag(false);
        request.setStatus("Pending for homestudy initiation from management");
        
        populateRequestTable();
        populateRequestAssignedToMeTable();
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void btnAdoptionApprovedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdoptionApprovedActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequesAssignedToMeJTable.getSelectedRow();
        if (selectedRow < 0){
          
            JOptionPane.showMessageDialog(null, "Please select a request message to process.");
            return;
        }
        else{
         
        ManagementWorkRequest request = (ManagementWorkRequest)workRequesAssignedToMeJTable.getValueAt(selectedRow, 0);
        //request.getParent().getAdoptionStatus(ProspectiveParent.WAITING);
        if(request.getStatus().equals(ManagementWorkRequest.FINALSTATUS) && request.getMessage().equals(ManagementWorkRequest.TRAINING)){
        ProspectiveParent parent = request.getParent();
        parent.setAdoptionStatus(ProspectiveParent.WAITING);
        }
        }
    }//GEN-LAST:event_btnAdoptionApprovedActionPerformed

    public void refreshData(){
        
        for(Organization o:enterprise.getOrganizationDirectory().getOrganizationList()){
            if(o.getWorkQueue().getWorkRequestList() != null){
            for(WorkRequest w:o.getWorkQueue().getWorkRequestList()){
                if(w.getReceiver() != null && account.getWorkQueue().getWorkRequestList() != null){
                for(WorkRequest Req:account.getWorkQueue().getWorkRequestList()){
                //w.setStatus(c);
                if(w.getParent().equals(Req.getParent())){
                String status = Req.getStatus();
                w.setStatus(status);
                        }
                     }
                }
                
            }
        }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton btnAdoptionApproved;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblEnterprise;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTable workRequesAssignedToMeJTable;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
