/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.MedicalCheckRole;

import Business.EcoSystem;
import Business.Enterprise.AdoptionEnterprise;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HomeStudyEnterprise;
import Business.Network.Network;
import Business.Organization.AnalyticalCheckOrganization;
import Business.Organization.EducationalCheckOrganization;
import Business.Organization.ManagementOrganization;
import Business.Organization.MedicalCheckOrganization;
import Business.Organization.Organization;
import Business.Organization.ParentOrganization;
import Business.Organization.RegisterParentOrganization;
import Business.ProspectiveParent.ProspectiveParent;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AnalyticalCheckWorkRequest;
import Business.WorkQueue.ManagementWorkRequest;
import Business.WorkQueue.MedicalCheckWorkRequest;
import Business.WorkQueue.ParentWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import static userInterface.RegisterParentRole.RegisterParent1JPanel.sendEmail;

/**
 *
 * @author kinnari
 */
public class MedicalCheckWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form MedicalCheckWorkAreaJPanel
     */
    
    private JPanel userProcessContainer;
    private UserAccount account;
    private MedicalCheckOrganization organization;
    private HomeStudyEnterprise enterprise;
    private EcoSystem business;
    
      public MedicalCheckWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, MedicalCheckOrganization medicalCheckOrganization, HomeStudyEnterprise enterprise, EcoSystem business) {
        
          initComponents();
          this.userProcessContainer = userProcessContainer;
          this.account = account;
          this.enterprise = enterprise;
          this.organization = medicalCheckOrganization;
          this.business = business;
          populateRequestTable();
          populateTable();
    }
      
        public void populateRequestTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();

        model.setRowCount(0);

        for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
            Object[] row = new Object[5];
            row[0] = request;
            row[1] = request.getSender().getEmployee().getName();
            row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
            row[3] = request.getStatus();
            row[4] = ((MedicalCheckWorkRequest)request).getDocUploadStatus() == null ? null : ((MedicalCheckWorkRequest)request).getDocUploadStatus();

            model.addRow(row);
        }

        }

        public void populateTable(){
            
            DefaultTableModel model = (DefaultTableModel) workRequestJTable1.getModel();

        model.setRowCount(0);

        for (WorkRequest request : account.getWorkQueue().getWorkRequestList()) {
            AnalyticalCheckWorkRequest req = (AnalyticalCheckWorkRequest)request;
            Object[] row = new Object[4];
            row[0] = req;
            row[1] = req.getSender().getEmployee().getName();
            row[2] = req.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
            row[3] = req.getStatus();
            //row[4] = ((MedicalCheckWorkRequest)request).getDocUploadStatus() == null ? null : ((MedicalCheckWorkRequest)request).getDocUploadStatus();

            model.addRow(row);
        }
        }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        assignJButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        btnRequestReport = new javax.swing.JButton();
        btnAnalytics = new javax.swing.JButton();
        btnReject = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        workRequestJTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 204, 204));

        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });

        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Parent", "Sender", "Receiver", "Status", "Report status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        btnRequestReport.setText("Request Applicants Medical Report");
        btnRequestReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRequestReportActionPerformed(evt);
            }
        });

        btnAnalytics.setText("Perform Analytics");
        btnAnalytics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalyticsActionPerformed(evt);
            }
        });

        btnReject.setText("Reject");
        btnReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectActionPerformed(evt);
            }
        });

        workRequestJTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Parent", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(workRequestJTable1);

        jLabel1.setText("Analytics Status:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Medical Check Work Area JPanel");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(108, 108, 108)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnRequestReport)
                            .addComponent(assignJButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(processJButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnReject))
                            .addComponent(btnAnalytics)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(refreshJButton)))
                .addGap(430, 430, 430))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(76, 76, 76)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshJButton))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(processJButton)
                    .addComponent(assignJButton)
                    .addComponent(btnReject))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRequestReport)
                    .addComponent(btnAnalytics))
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        //        int selectedRow = workRequestJTable.getSelectedRow();
        //
        //        if (selectedRow >= 0) {
            //            WorkRequest request = (WorkRequest) workRequestJTable.getValueAt(selectedRow, 0);
            //            if (request.getStatus().equalsIgnoreCase("Completed")) {
                //                JOptionPane.showMessageDialog(null, "Request already processed.");
                //                return;
                //            } else {
                //                request.setReceiver(account);
                //                request.setStatus("Pending");
                //                populateRequestTable();
                //
                //            }
            //
            //        } else {
            //            JOptionPane.showMessageDialog(null, "Choose a request to process.");
            //            return;
            //        }

        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0){
            return;
        }

        MedicalCheckWorkRequest request = (MedicalCheckWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
        request.setReceiver(account);
        request.setStatus(MedicalCheckWorkRequest.INPROGRESS);
        populateRequestTable();
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0){

            JOptionPane.showMessageDialog(null, "Please select a request message to process.");
        }
        else{

            MedicalCheckWorkRequest request = (MedicalCheckWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);

            if(request.getDocUploadStatus().equals(MedicalCheckWorkRequest.DOCSTATUS_UPLOADED)){
            
           /* ProspectiveParent p1 = request.getParent();
            if(p1.isGenetic()==true && p1.isCarrierGenetic()==true && p1.isIllness()==true){
                request.setStatus("Parent is not eligible for adoption");
                return;
            }*/

               // request.setStatus("Processing");
                       
                MedicalProcessWorkRequestJPanel processWorkRequestJPanel = new MedicalProcessWorkRequestJPanel(userProcessContainer, request,business);
                userProcessContainer.add("MedicalprocessWorkRequestJPanel", processWorkRequestJPanel);
                CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                layout.next(userProcessContainer);  
            }
         
        }

        /*  int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow >= 0) {
            LabTestWorkRequest request = (LabTestWorkRequest) workRequestJTable.getValueAt(selectedRow, 0);

            request.setStatus("Processing");

            ProcessWorkRequestJPanel processWorkRequestJPanel = new ProcessWorkRequestJPanel(userProcessContainer, request);
            userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);

        } else {
            JOptionPane.showMessageDialog(null, "Please select a request message to process.");
            return;
        }*/
    }//GEN-LAST:event_processJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateRequestTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void btnRequestReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRequestReportActionPerformed
       
        int selectedRow = workRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        
        MedicalCheckWorkRequest mReq = (MedicalCheckWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
        
        ParentWorkRequest parentReq = new ParentWorkRequest();
        parentReq.setSender(account);
        parentReq.setStatus(MedicalCheckWorkRequest.DOCSTATUS_WAITING);
        parentReq.setDescription("Please upload medical reports");
        parentReq.setParent(mReq.getParent());
        parentReq.setmWorkRequest(mReq);
        
        Organization orgParent = null;
        for (Network network : business.getNetworkList()) {
         for (Enterprise enterprise1 : network.getEnterpriseDirectory().getEnterpriseList())
         if(enterprise1 instanceof AdoptionEnterprise)
         {
            for (Organization organization1 : enterprise1.getOrganizationDirectory().getOrganizationList())             
            {
            if (organization1 instanceof ParentOrganization){
                orgParent = organization1;
                //ent=enterprise1;
                break;
               }
            }
         }
    }
        if (orgParent!=null){
            //orgParent.getWorkQueue().getWorkRequestList().add(request);
           // account.getWorkQueue().getWorkRequestList().add(request);
            for(UserAccount acc: orgParent.getUserAccountDirectory().getUserAccountList()){
                
                if(acc.getEmployee().toString().equals(mReq.getParent().toString())){
                    acc.getWorkQueue().getWorkRequestList().add(parentReq);
                    JOptionPane.showMessageDialog(null, "reports requested from applicant");
                }
            }
        }
        
    }//GEN-LAST:event_btnRequestReportActionPerformed

    private void btnAnalyticsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalyticsActionPerformed
        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0){

            JOptionPane.showMessageDialog(null, "Please select a request message to process.");
        }
        else{

            MedicalCheckWorkRequest request = (MedicalCheckWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);

            
            ProspectiveParent p1 = request.getParent();
            if(p1.isGenetic()==true && p1.isCarrierGenetic()==true && p1.isIllness()==true){
                request.setStatus("Parent is not eligible for adoption");
                return;
            }

                request.setStatus("Analytical check Processing");
                       
            AnalyticalCheckWorkRequest req = new AnalyticalCheckWorkRequest();
            
            req.setSender(account);
            req.setParent(request.getParent());
            req.setStatus("Initiate Analytical check");
            
            Organization org = null;
            for (Organization organiz : enterprise.getOrganizationDirectory().getOrganizationList()){
                if (organiz instanceof AnalyticalCheckOrganization){
                    org = organiz;
                    break;
                }

            }
            if (org!=null){

                org.getWorkQueue().getWorkRequestList().add(req);
                account.getWorkQueue().getWorkRequestList().add(req);
                JOptionPane.showMessageDialog(null, "Request message sent to Analytical check Organization");
                populateRequestTable();
            }

        }
    }//GEN-LAST:event_btnAnalyticsActionPerformed

    private void btnRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectActionPerformed
        // TODO add your handling code here:
        
         int selectedRow = workRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        
        MedicalCheckWorkRequest mReq = (MedicalCheckWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
        //mReq.setMessage(resultJTextField.getText());
        mReq.setStatus("Parent not eligible for adoption");
        ProspectiveParent p = mReq.getParent();
        String email = p.getEmailId();
        //String email = request.getParent().getEmailId();
        //if(request.getStatus().equals(MedicalCheckWorkRequest.FINALSTATUS)){
          for(Network n: business.getNetworkList()){
              for(Enterprise e: n.getEnterpriseDirectory().getEnterpriseList()){
                  
                  if(e instanceof AdoptionEnterprise){
                      
                      for(Organization o: e.getOrganizationDirectory().getOrganizationList()){
                          
                          if(o instanceof ManagementOrganization){
                              
                              for(WorkRequest w:o.getWorkQueue().getWorkRequestList()){
                                  if(mReq.getParent().equals(w.getParent())){
                                      if(mReq.getStatus().equals("Parent not eligible for adoption")){
                                          
                                         w.setStatus(ManagementWorkRequest.REJECTEDSTATUS);
                                          String newLine = System.getProperty("line.separator");
                                           sendEmail("parent2202@gmail.com", "Parent@2202", email, "Status Update || Background Verification Completed", "Dear " + mReq.getParent().toString() + newLine + "Congrats, Background verification completed successfully and you are eligible for adoption."+ newLine + "We will soon notify you with the dates to complete mandatory training which are required for adopting child." + newLine + "Best Regards" + newLine + "Adoption Agency");
                                      }
                                  }
                              }
                          }
                      }
                  }
              }
              
          }
            JOptionPane.showMessageDialog(null, "Request sent to  management office");
    }//GEN-LAST:event_btnRejectActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton btnAnalytics;
    private javax.swing.JButton btnReject;
    private javax.swing.JButton btnRequestReport;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTable workRequestJTable;
    private javax.swing.JTable workRequestJTable1;
    // End of variables declaration//GEN-END:variables
}
