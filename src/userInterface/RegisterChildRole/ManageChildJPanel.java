/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.RegisterChildRole;

import Business.Child.Child;
import Business.EcoSystem;
import Business.Enterprise.AdoptionEnterprise;
import Business.Organization.ChildrenManagementOrganization;
import Business.Organization.Organization;
import Business.Organization.RegisterChildOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.ManageChildWorkRequest;
import Business.WorkQueue.ManagementWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author CHITRA PARYANI
 */
public class ManageChildJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageChildJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount account;
    private RegisterChildOrganization organization;
    private AdoptionEnterprise enterprise;
    private EcoSystem business;

    public ManageChildJPanel(JPanel userProcessContainer, UserAccount account, RegisterChildOrganization organization, AdoptionEnterprise enterprise, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.enterprise = enterprise;
        this.organization = organization;
        this.business = business;

        lblEnterprise.setText(enterprise.getName());
        //refreshData();
        populateChildTable();
        populateRequestTable();
        populatePendingMedicalChildTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ChildJTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        requestJTable = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        btnInitiateProcess = new javax.swing.JButton();
        lblEnterprise = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        pendingMedicalChildJTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        btnRemove = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        txtSearchByName = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 204, 204));

        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblTitle.setText("Manage Children");

        jLabel1.setText("Register Child Details:");

        ChildJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Child", "Age", "Height", "Weight", "RegisteredFrom", "Medical Report Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(ChildJTable);

        jLabel2.setText("Request sent to Management to initiate Medical Check Process:");

        requestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Child", "Reciever", "Status", "Result"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(requestJTable);

        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnInitiateProcess.setText("Initiate Process");
        btnInitiateProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInitiateProcessActionPerformed(evt);
            }
        });

        lblEnterprise.setText("jLabel3");

        pendingMedicalChildJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Child", "RegisteredFrom", "Medical Report Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(pendingMedicalChildJTable);

        jLabel3.setText("Children with pending Medical Report:");

        btnRemove.setText("Remove Child");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnSearch.setText("Search Child");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        txtSearchByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchByNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(209, 209, 209)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtSearchByName, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSearch)
                                .addGap(35, 35, 35)
                                .addComponent(btnRemove))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnBack)
                                .addComponent(btnInitiateProcess)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(91, 91, 91)
                                    .addComponent(lblEnterprise, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3)))))
                .addGap(70, 70, 70))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(lblEnterprise, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemove)
                    .addComponent(btnSearch)
                    .addComponent(txtSearchByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(btnInitiateProcess)
                .addGap(30, 30, 30)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(btnBack)
                .addContainerGap(141, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void populateChildTable() {

        DefaultTableModel dtm = (DefaultTableModel) ChildJTable.getModel();
        dtm.setRowCount(0);

        for (Child child : enterprise.getChildDirectory().getChildList()) {

            Object[] row = new Object[6];

            row[0] = child;
            row[1] = child.getAge();
            row[2] = child.getHeight();
            row[3] = child.getWeight();
            row[4] = child.getRegisteredFrom();
            row[5] = child.getMedicalReportStatus();

            dtm.addRow(row);

        }

    }
    
    public void populatePendingMedicalChildTable() {

        DefaultTableModel dtm = (DefaultTableModel) pendingMedicalChildJTable.getModel();
        dtm.setRowCount(0);

        for (Child child : enterprise.getChildDirectory().getChildList()) {
            if(child.getRegisteredFrom().equals("Government")){
                
                Object[] row = new Object[3];

                row[0] = child;
             
                row[1] = child.getRegisteredFrom();
                row[2] = child.getMedicalReportStatus();

                dtm.addRow(row);
           }

        }

    }

    public void populateRequestTable() {
        DefaultTableModel dtm = (DefaultTableModel) requestJTable.getModel();
        dtm.setRowCount(0);

        for (WorkRequest request : account.getWorkQueue().getWorkRequestList()) {

            Object[] row = new Object[4];

            row[0] = request;
            row[1] = request.getReceiver();
            row[2] = request.getStatus();
            row[3] = null;
            dtm.addRow(row);
        }
    }

//    public void refreshData() {
//
//        for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
//            if (o.getWorkQueue().getWorkRequestList() != null) {
//                for (WorkRequest w : o.getWorkQueue().getWorkRequestList()) {
//                    if (w.getReceiver() != null && account.getWorkQueue().getWorkRequestList() != null) {
//                        for (WorkRequest Req : account.getWorkQueue().getWorkRequestList()) {
//                            //w.setStatus(c);
//                            if (w.getChild().equals(Req.getChild())) {
//                                String status = Req.getStatus();
//                                w.setStatus(status);
//                            }
//                        }
//                    }
//
//                }
//            }
//        }
//    }

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnInitiateProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInitiateProcessActionPerformed
        // TODO add your handling code here:

       // int selectedRow = ChildJTable.getSelectedRow();
        int selectedRow = pendingMedicalChildJTable.getSelectedRow();
        if (selectedRow < 0) {
            return;
        }

        Child vi = (Child) pendingMedicalChildJTable.getValueAt(selectedRow, 0);

        ManageChildWorkRequest request = new ManageChildWorkRequest();        
        request.setChild(vi);
        request.setSender(account);
        request.setStatus("Initiate Process");
        // JOptionPane.showMessageDialog(null, "Request sent to management ");
        Organization org = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof ChildrenManagementOrganization) {
                org = organization;
                break;
            }
        }
        if (org != null) {
            org.getWorkQueue().getWorkRequestList().add(request);
            account.getWorkQueue().getWorkRequestList().add(request);
        }

        JOptionPane.showMessageDialog(null, "Request has been sent to Management");
        populateRequestTable();
    
    }//GEN-LAST:event_btnInitiateProcessActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        int selectedRow = ChildJTable.getSelectedRow();
        if(selectedRow>=0){
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null, "would you like to delete child record?","Warning",dialogButton);
            if(dialogResult == JOptionPane.YES_OPTION){
                Child a = (Child)ChildJTable.getValueAt(selectedRow, 0);
                enterprise.getChildDirectory().removeChild(a);
                populateChildTable();
            }
            
        }else{
            
            JOptionPane.showMessageDialog(null, "Please select a row","warning",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        Child result = enterprise.getChildDirectory().searchChild(txtSearchByName.getText());
        
        if(result == null)
        {
        JOptionPane.showMessageDialog(null, "Child not found", "Information", JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            
            ViewChildPanel panel = new ViewChildPanel(userProcessContainer, result);
          userProcessContainer.add("ViewChildPanel", panel);
               CardLayout layout = (CardLayout)userProcessContainer.getLayout();
               layout.next(userProcessContainer);
        
        
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void txtSearchByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchByNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchByNameActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ChildJTable;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnInitiateProcess;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblEnterprise;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable pendingMedicalChildJTable;
    private javax.swing.JTable requestJTable;
    private javax.swing.JTextField txtSearchByName;
    // End of variables declaration//GEN-END:variables
}
