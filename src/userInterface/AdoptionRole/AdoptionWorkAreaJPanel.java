/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.AdoptionRole;

import Business.Child.Child;
import Business.EcoSystem;
import Business.Enterprise.AdoptionEnterprise;
import Business.Organization.AdoptionOrganization;
import Business.ProspectiveParent.ProspectiveParent;
import Business.UserAccount.UserAccount;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sneha
 */
public class AdoptionWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AdoptionWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount account;
    private AdoptionOrganization adoptionOrganization;
    private AdoptionEnterprise adoptionEnterprise;
    private EcoSystem business;
    public AdoptionWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, AdoptionOrganization adoptionOrganization, AdoptionEnterprise adoptionEnterprise, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.adoptionOrganization = adoptionOrganization;
        this.adoptionEnterprise = adoptionEnterprise;
        this.business = business;
        populateParentTable();
        populateChildTable();
        populateParentAssignedTable();
    }

    
    public void populateParentTable(){
        
       DefaultTableModel model = (DefaultTableModel) parentJTable.getModel();

        model.setRowCount(0);
        for (ProspectiveParent parent: adoptionEnterprise.getProspectiveParentDirectory().getParentList()) {
            if(parent.getAdoptionStatus().equals(ProspectiveParent.WAITING)){
                Object[] row = new Object[2];
                row[0] = parent;
                row[1] = parent.getAdoptionStatus();

                model.addRow(row);
            }
            
        } 
    }
    
    public void populateChildTable() {

        DefaultTableModel dtm = (DefaultTableModel) ChildJTable.getModel();
        dtm.setRowCount(0);

        for (Child child : adoptionEnterprise.getChildDirectory().getChildList()) {
            if(child.getAdoptionStatus().equals(Child.CHILD_WAITING)){
                Object[] row = new Object[2];

                row[0] = child;
                row[1] = child.getAdoptionStatus();
               

                dtm.addRow(row);
            }

        }

    }
    
    public void populateParentAssignedTable(){
        
       DefaultTableModel model = (DefaultTableModel) parentChildJTable.getModel();

        model.setRowCount(0);
        for (ProspectiveParent parent: adoptionEnterprise.getProspectiveParentDirectory().getParentList()) {
            if(parent.getChild() != null){
                Object[] row = new Object[2];
                row[0] = parent;
                row[1] = parent.getChild();
               

                model.addRow(row);
            }
            
        } 
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ChildJTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        parentJTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        parentChildJTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        btnAssignChild = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 204, 204));

        ChildJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Child", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(ChildJTable);

        parentJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Parent1", "Age"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(parentJTable);

        jLabel1.setText("Parent with waiting status:");

        jLabel2.setText("Children to be adopted:");

        parentChildJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Parent", "Child"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(parentChildJTable);

        jLabel3.setText("Parents with assigned child:");

        btnAssignChild.setText("Assign Child");
        btnAssignChild.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignChildActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnAssignChild)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(29, 29, 29))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAssignChild)
                .addGap(12, 12, 12)
                .addComponent(jLabel3)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(125, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAssignChildActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignChildActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = parentJTable.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        
        ProspectiveParent vi = (ProspectiveParent)parentJTable.getValueAt(selectedRow, 0);
        if(vi.getChildAge().equals(ProspectiveParent.AGE_1)){
            for(Child child: adoptionEnterprise.getChildDirectory().getChildList()){
                
                 if(child.getAge() == 0 && child.getAdoptionStatus().equals(Child.CHILD_WAITING)){
                    
                    vi.setChild(child);
                    vi.setAdoptionStatus(ProspectiveParent.ADOPTED);
                    child.setAdoptionStatus(Child.CHILD_ADOPTED);
                    //break;
                    populateParentAssignedTable();
                    populateParentTable();
                    populateParentTable();
                }
            }
        }
            else if(vi.getChildAge().equals(ProspectiveParent.AGE_2)){
            for(Child child: adoptionEnterprise.getChildDirectory().getChildList()){
                
                 if(child.getAge() > 0 && child.getAge() <6 &&child.getAdoptionStatus().equals(Child.CHILD_WAITING)){
                    
                    vi.setChild(child);
                    vi.setAdoptionStatus(ProspectiveParent.ADOPTED);
                    child.setAdoptionStatus(Child.CHILD_ADOPTED);
                   // break;
                   populateParentAssignedTable();
                    populateParentTable();
                    populateParentTable();
                }
            }
        }else if(vi.getChildAge().equals(ProspectiveParent.AGE_3)){
            for(Child child: adoptionEnterprise.getChildDirectory().getChildList()){
                
                 if(child.getAge() >5 &&  child.getAge() <=10 && child.getAdoptionStatus().equals(Child.CHILD_WAITING)){
                    
                    vi.setChild(child);
                    vi.setAdoptionStatus(ProspectiveParent.ADOPTED);
                    child.setAdoptionStatus(Child.CHILD_ADOPTED);
                   // break;
                   populateParentAssignedTable();
                    populateParentTable();
                    populateParentTable();
                }
                 /*else{
                    
                    JOptionPane.showMessageDialog(null, "No child present suitable for this parent");
                    return;
                }*/
            }
        }else if(vi.getChildAge().equals(ProspectiveParent.AGE_4)){
            for(Child child: adoptionEnterprise.getChildDirectory().getChildList()){
                
                 if(child.getAge() > 10 && child.getAdoptionStatus().equals(Child.CHILD_WAITING)){
                    
                    vi.setChild(child);
                    vi.setAdoptionStatus(ProspectiveParent.ADOPTED);
                    child.setAdoptionStatus(Child.CHILD_ADOPTED);
                    //break;
                    populateParentAssignedTable();
                    populateParentTable();
                    populateParentTable();
                }
            }
        }else{
            
            JOptionPane.showMessageDialog(null, "No child present suitable for this parent");
        }
        
        /*for(Child child: adoptionEnterprise.getChildDirectory().getChildList()){
            
            if(vi.getChildAge().equals(ProspectiveParent.AGE_1)){
                
                if(child.getAge() == 0 && child.getAdoptionStatus().equals(Child.CHILD_WAITING)){
                    
                    vi.setChild(child);
                    vi.setAdoptionStatus(ProspectiveParent.ADOPTED);
                    child.setAdoptionStatus(Child.CHILD_ADOPTED);
                    break;
                }else{
                    
                    JOptionPane.showMessageDialog(null, "No child present suitable for this parent");
                    return;
                }
            }else if(vi.getChildAge().equals(ProspectiveParent.AGE_2)){
                
                if(child.getAge() > 0 && child.getAge() < 6 && child.getAdoptionStatus().equals(Child.CHILD_WAITING)){
                    
                    vi.setChild(child);
                    vi.setAdoptionStatus(ProspectiveParent.ADOPTED);
                    child.setAdoptionStatus(Child.CHILD_ADOPTED);
                    break;
                }else{
                    
                    JOptionPane.showMessageDialog(null, "No child present suitable for this parent");
                    return;
                }
            }else if(vi.getChildAge().equals(ProspectiveParent.AGE_3)){
                
                if(child.getAge() > 5 && child.getAge() <= 10 && child.getAdoptionStatus().equals(Child.CHILD_WAITING)){
                    
                    vi.setChild(child);
                    vi.setAdoptionStatus(ProspectiveParent.ADOPTED);
                    child.setAdoptionStatus(Child.CHILD_ADOPTED);
                    break;
                }else{
                    
                    JOptionPane.showMessageDialog(null, "No child present suitable for this parent");
                    return;
                }
            }else if(vi.getChildAge().equals(ProspectiveParent.AGE_4) && child.getAdoptionStatus().equals(Child.CHILD_WAITING)){
                
                if(child.getAge() > 10 ){
                    
                    vi.setChild(child);
                    vi.setAdoptionStatus(ProspectiveParent.ADOPTED);
                    child.setAdoptionStatus(Child.CHILD_ADOPTED);
                    break;
                }else{
                    
                    JOptionPane.showMessageDialog(null, "No child present suitable for this parent");
                    return;
                }
            }
            
            
        }*/
    }//GEN-LAST:event_btnAssignChildActionPerformed
     public void assignChild(ProspectiveParent  p){
         
         
         
     }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ChildJTable;
    private javax.swing.JButton btnAssignChild;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable parentChildJTable;
    private javax.swing.JTable parentJTable;
    // End of variables declaration//GEN-END:variables
}
