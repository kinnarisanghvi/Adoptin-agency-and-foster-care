/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.ChildrentManagementOffice;

import Business.Child.Child;
import Business.EcoSystem;
import Business.Enterprise.AdoptionEnterprise;
import Business.Enterprise.Enterprise;
import Business.Enterprise.FosterCareEnterprise;
import Business.Network.Network;
import Business.Organization.ChildrenManagementOrganization;
import Business.Organization.ChildrenMedicalCheckUpOrganization;
import Business.Organization.ManagementOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.ChildMedicalCheckWorkRequest;
import Business.WorkQueue.CriminalCheckWorkRequest;
import Business.WorkQueue.ManageChildWorkRequest;
import Business.WorkQueue.WorkRequest;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author CHITRA PARYANI
 */
public class ChildrenManagementWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ChildrenManagementWorkAreaJPanel
     */
     private JPanel userProcessContainer;
    private UserAccount account;
    private ChildrenManagementOrganization organization;
    private AdoptionEnterprise enterprise;
    private EcoSystem business;
    
    public ChildrenManagementWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, ChildrenManagementOrganization organization, AdoptionEnterprise enterprise, EcoSystem business) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.enterprise = enterprise;
        this.organization = organization;
        this.business = business;
        lblEnterprise.setText("Enterprise: "+enterprise.getName());
        populateRequestTable();
        populateRequestAssignedToMeTable();
        populateMedicalRequestTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblEnterprise = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        btnAssign = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        workRequestAssignedJTable = new javax.swing.JTable();
        btnMedical = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        workMedicalRequestJTable = new javax.swing.JTable();
        btnApprove = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 204, 204));

        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblTitle.setText("My Work Area -Management Office Role");

        lblEnterprise.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        lblEnterprise.setText("jLabel4");

        jLabel1.setText("Requests from adoption management:");

        jLabel3.setText("Requests assigned to me:");

        jLabel2.setText("Requests sent for Medical Checkup:");

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Child", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        btnAssign.setText("Assign To Me");
        btnAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignActionPerformed(evt);
            }
        });

        workRequestAssignedJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Child", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(workRequestAssignedJTable);

        btnMedical.setText("Process for Medical Checkup");
        btnMedical.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMedicalActionPerformed(evt);
            }
        });

        workMedicalRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Child", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(workMedicalRequestJTable);

        btnApprove.setText("Approve for adoption");
        btnApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApproveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnApprove))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAssign))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1)
                    .addComponent(lblEnterprise, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTitle)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnMedical)))
                .addGap(76, 76, 76))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblEnterprise)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(btnAssign)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(btnMedical)))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(btnApprove)
                        .addGap(116, 116, 116))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();
        
        if(selectedRow < 0) {
            JOptionPane.showMessageDialog(null,"Please select a request to proceed!");
            return;
        }
        
        WorkRequest request = (WorkRequest) workRequestJTable.getValueAt(selectedRow, 0);
        request.setReceiver(account);
        request.setProcessedFlag(false);
        request.setStatus("Request sent for medical check up");
        
        populateRequestTable();
        populateRequestAssignedToMeTable();

    }//GEN-LAST:event_btnAssignActionPerformed

    private void btnMedicalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMedicalActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestAssignedJTable.getSelectedRow();
        if (selectedRow < 0){
          
            JOptionPane.showMessageDialog(null, "Please select a request message to process.");
            return;
        } else {
            ManageChildWorkRequest request = (ManageChildWorkRequest) workRequestAssignedJTable.getValueAt(selectedRow, 0);
        
            ChildMedicalCheckWorkRequest req = new ChildMedicalCheckWorkRequest();
            
            req.setSender(account);
            req.setChild(request.getChild());
            req.setStatus("Initiate Medical Check up");
            request.setStatus(req.getStatus());
            req.setProcessedFlag(true);
            request.setProcessedFlag(true);
        
            Organization org = null;
            Enterprise ent =  null;
            
         for (Network network : business.getNetworkList()) {
         for (Enterprise enterprise1 : network.getEnterpriseDirectory().getEnterpriseList())
         if(enterprise1 instanceof FosterCareEnterprise)
         {
            for (Organization organization1 : enterprise1.getOrganizationDirectory().getOrganizationList())             
            {
            if (organization1 instanceof ChildrenMedicalCheckUpOrganization){
                org = organization1;
                ent=enterprise1;
                break;
               }
            }
         }       
         
    }
         
           if (org!=null){
        
           org.getWorkQueue().getWorkRequestList().add(req);
           account.getWorkQueue().getWorkRequestList().add(req);
           JOptionPane.showMessageDialog(null, "Request message sent to medical check Organization");
           populateRequestTable();
        }
        
            
        }
        
        populateRequestAssignedToMeTable();
        populateMedicalRequestTable();
    }//GEN-LAST:event_btnMedicalActionPerformed

    private void btnApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApproveActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = workMedicalRequestJTable.getSelectedRow();
        if (selectedRow < 0){
          
            JOptionPane.showMessageDialog(null, "Please select a request message to process.");
            return;
        } else {
            ChildMedicalCheckWorkRequest request = (ChildMedicalCheckWorkRequest) workMedicalRequestJTable.getValueAt(selectedRow, 0);
            
            Child c = request.getChild();
            c.setMedicalReportStatus(Child.MEDICAL_REPORT_STATUS_YES);
            c.setAdoptionStatus(Child.CHILD_WAITING);
        }
    }//GEN-LAST:event_btnApproveActionPerformed
    public void populateMedicalRequestTable()
    {
        DefaultTableModel model = (DefaultTableModel) workMedicalRequestJTable.getModel();

        model.setRowCount(0);

        for (WorkRequest request : account.getWorkQueue().getWorkRequestList()) {
            if(request.isProcessedFlag() == true){
            Object[] row = new Object[4];
            row[0] = request;
            row[1] = request.getSender().getEmployee().getName();
            row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
            //if(req !=null){
            //row[3] = req.getStatus()== null? request.getStatus():req.getStatus();
            //}else{
           String result = ((ChildMedicalCheckWorkRequest) request).getStatus();
           row[3] = result == null ? "Waiting" : result;
           // row[3] = request.getStatus();
            //}

            model.addRow(row);
            }
        }
    }
    public void populateRequestTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();

        model.setRowCount(0);

        for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
            if (request.getReceiver() == null) {
                Object[] row = new Object[4];
                row[0] = request;
                row[1] = request.getSender().getEmployee().getName();
                row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();

                row[3] = request.getStatus();

                model.addRow(row);
            }
        }

    }
    
    public void populateRequestAssignedToMeTable()
    {
        DefaultTableModel dtm = (DefaultTableModel) workRequestAssignedJTable.getModel();
        dtm.setRowCount(0);
        
        for(WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
            if(request.isProcessedFlag()==false && request.getReceiver() !=null) {
                Object[] row = new Object[4];
                row[0] = request;
                row[1] = request.getSender().getEmployee().getName();
                row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
                row[3] = request.getStatus();
                
                dtm.addRow(row);
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApprove;
    private javax.swing.JButton btnAssign;
    private javax.swing.JButton btnMedical;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblEnterprise;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable workMedicalRequestJTable;
    private javax.swing.JTable workRequestAssignedJTable;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
